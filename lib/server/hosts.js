// Generated by CoffeeScript 1.6.2
(function() {
  var Hosts, fs, os, _;

  _ = require("underscore");

  os = require("os");

  fs = require("fs");

  Hosts = (function() {
    /*
    */
    function Hosts() {
      this._hosts = {};
      this._backup();
      this._watchExit();
    }

    /*
    */


    Hosts.prototype.set = function(domain, ip) {
      if (ip == null) {
        ip = "127.0.0.1";
      }
      if (!this._hosts[ip]) {
        this._hosts[ip] = [];
      }
      this._hosts[ip].push(domain);
      this._hosts[ip] = _.uniq(this._hosts[ip]);
      return this.save();
    };

    /*
    */


    Hosts.prototype.unset = function(domain) {
      var i, ip;

      for (ip in this._hosts) {
        i = this._hosts[ip].indexOf(domain);
        if (~i) {
          this._hosts[ip].splice(i, 1);
        }
      }
      return this.save();
    };

    /*
    */


    Hosts.prototype._backup = function() {
      var backupPath;

      if (fs.existsSync(backupPath = this._path() + "-backup")) {
        return;
      }
      return fs.writeFileSync(backupPath, fs.readFileSync(this._path(), "utf8"));
    };

    /*
    */


    Hosts.prototype.toString = function() {
      var buffer, ip;

      buffer = [""];
      for (ip in this._hosts) {
        buffer.push(ip, " ", this._hosts[ip].join(" "), "\n");
      }
      return buffer.join("");
    };

    /*
    */


    Hosts.prototype.save = function() {
      return fs.writeFileSync(this._path(), this.toString());
    };

    /*
    */


    Hosts.prototype._path = function() {
      if (os.type() === "Windows_NT") {
        return "C:\\Windows\\system32\\drivers\\etc\\hosts";
      } else {
        return "/etc/hosts";
      }
    };

    /*
    */


    Hosts.prototype._watchExit = function() {
      var _this = this;

      return process.once("SIGINT", function() {
        fs.writeFileSync(_this._path(), fs.readFileSync(_this._path() + "-backup", "utf8"));
        return process.exit();
      });
    };

    Hosts.instance = function() {
      return Hosts._instance || (Hosts._instance = new Hosts());
    };

    return Hosts;

  }).call(this);

  module.exports = Hosts;

}).call(this);
