// Generated by CoffeeScript 1.6.2
(function() {
  var Connections, EventEmitter, Handshake, outcome,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  Connections = require("./connections");

  outcome = require("outcome");

  Handshake = (function(_super) {
    __extends(Handshake, _super);

    /*
    */


    function Handshake() {
      this.connections = new Connections();
    }

    /*
    */


    Handshake.prototype.connect = function(con) {
      var _this = this;

      return con.once("data", function(c) {
        var args, cid, cmd, domain, kp, secret;

        kp = String(c).split(":");
        cmd = kp.shift();
        args = kp;
        if (cmd === "connect") {
          return _this._connect(args.shift(), con);
        } else if (cmd === "tunnel") {
          cid = kp.shift();
          secret = kp.shift();
          domain = kp.shift();
          return _this._addTunnel(domain, cid, secret, con);
        }
      });
    };

    /*
    */


    Handshake.prototype._addTunnel = function(domain, cid, secret, con) {
      return this.connections.addTunnel(domain, cid, secret, con, function(err) {
        if (err) {
          return console.log("connot add tunnel for \"" + domain + "\":" + err.message);
        }
      });
    };

    /*
    */


    Handshake.prototype._connect = function(domain, con) {
      var _this = this;

      return this.connections.add(domain, con, function(err, c) {
        if (err) {
          return con.write("error:" + err.message);
        }
        con.write("success:" + c.cid + ":" + c.secret + ":" + domain);
        return con.once("close", function() {
          console.log("disconnect " + domain);
          return _this.connections.remove(domain);
        });
      });
    };

    return Handshake;

  })(EventEmitter);

  module.exports = Handshake;

}).call(this);
