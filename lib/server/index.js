// Generated by CoffeeScript 1.6.2
(function() {
  var ChunnelClient, ChunnelServer, EventEmitter, HttpServers, SocketServer, net,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  net = require("net");

  ChunnelClient = require("./client");

  EventEmitter = require("events").EventEmitter;

  SocketServer = require("../socket").Server;

  HttpServers = require("./httpServers");

  ChunnelServer = (function(_super) {
    __extends(ChunnelServer, _super);

    /*
    */


    function ChunnelServer() {
      ChunnelServer.__super__.constructor.call(this);
      this._clients = [];
      this._cid = 0;
      this._httpServers = new HttpServers();
      this.on("client", this._onChunnelClient);
      this.on("connection", this._onHttpConnection);
    }

    /*
    */


    ChunnelServer.prototype.listen = function(port) {
      if (port == null) {
        port = 9526;
      }
      ChunnelServer.__super__.listen.call(this, port);
      console.log("chunnel server listening on port " + port);
      return this;
    };

    /*
    */


    ChunnelServer.prototype._onChunnelClient = function(domain, socket) {
      var client,
        _this = this;

      console.log("client connected on domain " + domain);
      if (!this._httpServers.hasClient(domain)) {
        return socket.error(new Error("cannot listen on domain " + domain + " (might already be taken)"));
      }
      this._clients[String(++this._cid)] = client = new ChunnelClient(socket, domain);
      this._httpServers.listen(domain, client);
      client.once("close", function() {
        return _this._clients.splice(_this._clients.indexOf(client), 1);
      });
      return socket.send("success", {
        cid: this._cid,
        secret: client.secret
      });
    };

    /*
    */


    ChunnelServer.prototype._onHttpConnection = function(message, socket) {
      var client;

      if (!(client = this._clients[String(message.cid)])) {
        return socket.error(new Error("cid does not exist"));
      }
      console.log("adding tunneled http connection for " + client._domain);
      return client.addConnection(socket.connection, message.secret);
    };

    return ChunnelServer;

  })(SocketServer);

  exports.listen = function(port) {
    return new ChunnelServer().listen(port);
  };

}).call(this);
