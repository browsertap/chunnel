// Generated by CoffeeScript 1.6.2
(function() {
  var Handshake, Server, net, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  net = require("net");

  _ = require("underscore");

  Handshake = require("./handshake");

  Server = (function() {
    /*
    */
    function Server() {
      this._onHttpClient = __bind(this._onHttpClient, this);
      this._onClient = __bind(this._onClient, this);      this._handshake = new Handshake();
      this._connections = this._handshake.connections;
    }

    /*
    */


    Server.prototype.listen = function(httpPort, connectionPort) {
      net.createServer(this._onClient).listen(connectionPort || (httpPort + 1));
      return net.createServer(this._onHttpClient).listen(httpPort);
    };

    /*
    */


    Server.prototype._onClient = function(con) {
      return this._handshake.connect(con);
    };

    /*
     handles HTTP requests
    */


    Server.prototype._onHttpClient = function(con) {
      var onErr,
        _this = this;

      onErr = function(err) {
        con.write("Not Found: " + (err != null ? err.message : void 0));
        return con.end();
      };
      return con.once("data", function(h) {
        var hosts;

        con.pause();
        hosts = String(h).match(/host:\s+([^\r]+)/i);
        if (!hosts) {
          return onErr(new Error("host not found"));
        }
        console.log("proxy " + hosts[1]);
        return _this._connections.getTunnel(hosts[1], function(e, c) {
          if (e != null) {
            return onErr(e);
          }
          con.pipe(c);
          c.pipe(con);
          c.write(h);
          return con.resume();
        });
      });
    };

    return Server;

  })();

  exports.listen = function(port) {
    return new Server().listen(port);
  };

}).call(this);
