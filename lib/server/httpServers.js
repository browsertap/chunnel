// Generated by CoffeeScript 1.6.2
(function() {
  var Hosts, HttpServer, HttpServers, Url;

  Url = require("url");

  HttpServer = require("./httpServer");

  Hosts = require("./hosts");

  HttpServers = (function() {
    /*
    */
    function HttpServers() {
      this._servers = {};
      this._hosts = Hosts.instance();
      this._domainCount = {};
    }

    /*
    */


    HttpServers.prototype.hasClient = function(domain) {
      var dp;

      dp = this._parseDomain(domain);
      return !this._servers[dp.port] || this._servers[dp.port].hasClient(dp.hostname);
    };

    /*
    */


    HttpServers.prototype.listen = function(domain, client) {
      var domainParts, hn, port, server,
        _this = this;

      domainParts = this._parseDomain(domain);
      hn = domainParts.hostname;
      port = domainParts.port;
      if (!this._domainCount[hn]) {
        this._domainCount[hn] = 1;
        this._hosts.set(hn);
      }
      if (!(server = this._servers[port])) {
        this._servers[port] = server = new HttpServer();
        if (!server.listen(port)) {
          return false;
        }
      }
      server.addClient(hn, client);
      return server.once("close", function() {
        _this._domainCount[hn]--;
        if (!_this._domainCount[hn]) {
          _this._hosts.unset(hn);
        }
        console.log("http server on port " + port + " has closed");
        delete _this._servers[port];
        return console.log("" + (Object.keys(_this._servers).length) + " http servers running");
      });
    };

    /*
    */


    HttpServers.prototype._parseDomain = function(domain) {
      var dp;

      if (domain == null) {
        domain = "";
      }
      if (!~domain.indexOf("://")) {
        domain = "http://" + domain;
      }
      dp = Url.parse(domain);
      if (!dp.port) {
        dp.port = 80;
      }
      return dp;
    };

    return HttpServers;

  })();

  module.exports = HttpServers;

}).call(this);
