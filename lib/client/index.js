// Generated by CoffeeScript 1.6.2
(function() {
  var Client, SocketRouter, Url, net, socket,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  socket = require("../socket");

  SocketRouter = socket.Router;

  Url = require("url");

  net = require("net");

  Client = (function() {
    function Client() {
      this._onGetConnection = __bind(this._onGetConnection, this);
      this._onConnected = __bind(this._onConnected, this);
      this._onError = __bind(this._onError, this);
      this._reconnect = __bind(this._reconnect, this);
    }

    /*
    */


    Client.prototype.connect = function(options) {
      var cc, hostParts, proxyParts;

      this.options = options;
      if (!~options.server.indexOf("://")) {
        options.server = "http://" + options.server;
      }
      if (!~options.proxy.indexOf("://")) {
        options.proxy = "http://" + options.proxy;
      }
      this.hostParts = hostParts = Url.parse(options.server);
      this.proxyParts = proxyParts = Url.parse(options.proxy);
      this._chunnelConnection = cc = socket.connect(hostParts.port, hostParts.hostname);
      cc.send("client", {
        domain: options.domain,
        password: options.password
      });
      cc.route({
        error: this._onError,
        success: this._onConnected,
        getConnection: this._onGetConnection
      });
      cc.connection.on("end", this._reconnect);
      return cc.connection.on("error", this._reconnect);
    };

    /*
    */


    Client.prototype._reconnect = function() {
      var _this = this;

      console.log("chunnel server has disconnected, reconnecting");
      this._cid = void 0;
      this._secret = void 0;
      this._connected = false;
      return setTimeout((function() {
        return _this.connect(_this.options);
      }), 2000);
    };

    /*
    */


    Client.prototype._onError = function(err) {
      return console.error(err.message);
    };

    /*
    */


    Client.prototype._onConnected = function(result) {
      if (this._connected) {
        return;
      }
      this._connected = true;
      this._cid = result.cid;
      this._secret = result.secret;
      return console.log("tunnel \"" + this.options.proxy + "\" is now accessible via \"" + this.options.domain + "\" on \"" + this.options.server + "\"");
    };

    /*
    */


    Client.prototype._onGetConnection = function() {
      var c, c2;

      console.log("creating http connection");
      c2 = net.connect(Number(this.proxyParts.port || 80), this.proxyParts.hostname);
      c = socket.connect(Number(this.hostParts.port), this.hostParts.hostname);
      c.send("connection", {
        cid: this._cid,
        secret: this._secret
      });
      c2.pipe(c.connection);
      return c.connection.pipe(c2);
    };

    return Client;

  })();

  exports.connect = function(options, callback) {
    return new Client().connect(options, callback);
  };

}).call(this);
