// Generated by CoffeeScript 1.6.2
(function() {
  var Client, EventEmitter;

  EventEmitter = require("events").EventEmitter;

  Client = (function() {
    /*
    */
    function Client(connection) {
      this.connection = connection;
      this._em = new EventEmitter();
      this._boundary = "||||||";
    }

    /*
    */


    Client.prototype.send = function(name, data, callback) {
      return this.connection.write(JSON.stringify({
        name: name,
        data: data
      }) + this._boundary);
    };

    /*
    */


    Client.prototype.error = function(err) {
      console.log("sending error: " + ((err != null ? err.message : void 0) || err));
      return this.send("error", {
        message: (err != null ? err.message : void 0) || err
      });
    };

    /*
    */


    Client.prototype.success = function(data) {
      return this.send("success", data);
    };

    /*
    */


    Client.prototype.close = function() {
      return this.connection.end();
    };

    /*
    */


    Client.prototype.route = function(methods) {
      var _this = this;

      this.routeOnce(methods);
      return this._em.once("data", function() {
        return _this.route(methods);
      });
    };

    /*
    */


    Client.prototype.routeOnce = function(methods) {
      var _this = this;

      if (this._listening) {
        throw new Error("cannot have more than one response handler");
      }
      this._listening = true;
      return this.connection.once("data", function(chunk) {
        var c, cmd, _i, _len, _ref, _ref1;

        _this._listening = false;
        _ref = String(chunk).split(_this._boundary);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cmd = _ref[_i];
          cmd = cmd.replace(/^\s/g, "").replace(/\s$/, "");
          if (!cmd.length) {
            continue;
          }
          c = JSON.parse(cmd);
          if (typeof methods === "function") {
            methods.call(_this, c);
          } else {
            if ((_ref1 = methods[c.name]) != null) {
              _ref1.call(_this, c.data);
            }
          }
        }
        return _this._em.emit("data", chunk);
      });
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
